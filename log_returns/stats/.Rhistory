bar_count(6)
bar_count(17)
out <- c(0)
out
out <- c()
out
# Ex5
summer <- function(v1, v2, v3) {
out <- c()
if (v1 %% 3 == 0){
append(out, v1)
}
if (v2 %% 3 == 0){
append(out, v2)
}
if (v3 %% 3 == 0){
append(out, v3)
}
return(sum(out))
}
summer(7,2,3)
summer(3,6,9)
summer(9,11,12)
# Ex5
summer <- function(v1, v2, v3) {
out <- c()
if (v1 %% 3 != 0){
append(out, v1)
}
if (v2 %% 3 != 0){
append(out, v2)
}
if (v3 %% 3 != 0){
append(out, v3)
}
return(sum(out))
}
summer(7,2,3)
summer(3,6,9)
summer(9,11,12)
# Ex5
summer <- function(v1, v2, v3) {
out <- c(0)
if (v1 %% 3 != 0){
append(out, v1)
}
if (v2 %% 3 != 0){
append(out, v2)
}
if (v3 %% 3 != 0){
append(out, v3)
}
return(sum(out))
}
summer(7,2,3)
summer(3,6,9)
summer(9,11,12)
print("yes")
summer(3,6,9)
out <- c()
append(out, 1)
out
# Ex5
summer <- function(v1, v2, v3) {
out <- c(0)
if (v1 %% 3 != 0){
out <- append(out, v1)
}
if (v2 %% 3 != 0){
out <- append(out, v2)
}
if (v3 %% 3 != 0){
out <- append(out, v3)
}
return(sum(out))
}
summer(7,2,3)
summer(3,6,9)
summer(9,11,12)
# Ex6
prime_check <- function(num) {
if (num == 2){
return(T)
} else if (any(num %% 2:(num-1) == 0)) {
return(F)
} else {
return(T)
}
}
prime_check(2)
prime_check(5)
prime_check(4)
prime_check(237)
prime_check(131)
times <- function(x){}
times <- function(x){}
times <- function(x){return(x*2)}
v<-1:5
v
sapply(v, times)
sapply(v, times)
class(sapply(v, times))
class(v)
times <- function(x,y){return(x*y)}
class(sapply(v,1:5, times))
class(sapply(v,times, y =1:5))
sapply(v,times, y =1:5)
help append
help(append)
help("factorial")
p = c(factorial(365) / (factorial(365-1) * 365))
for (i in 2:100){
k = i - 1
append(p, p[k] * (365 - k) / 465)
}
print(p[100])
p = c(factorial(365) / (factorial(365-1) * 365))
p
p = c(365 / 365)
for (i in 2:100){
k = i - 1
append(p, p[k] * (365 - k) / 465)
print(p)
}
print(p[100])
p = c(365 / 365)
for (i in 2:100){
k = i - 1
append(p, p[k] * (365 - k) / 365)
print(p)
}
print(p[100])
p = c(365 / 365)
for (i in 2:100){
k = i - 1
p = append(p, p[k] * (365 - k) / 365)
print(p)
}
print(p[100])
help("print")
print("The possibility of people with same birthday", 1-p[100])
# p[k] : k people all have different birthday
p = c(365 / 365)
for (i in 2:100){
k = i - 1
p = append(p, p[k] * (365 - k) / 365)
print(p)
}
print("The possibility of people with same birthday " + as.character(1-p[100]))
print("The possibility of people with same birthday " + toString(1-p[100]))
toString(10)
toString(10-5)
print("The possibility of people with same birthday " + toString(1-p[100]))
print("The possibility of people with same birthday " + toString((1-p[100])))
print("The possibility of people with same birthday " + toString(win))
win = 1-p[100]
print("The possibility of people with same birthday " + toString(win))
print("The possibility of people with different birthday: 1 - " + toString(p[100]))
p[100]
print("The possibility of people with different birthday: 1 - " + p[100])
print(paste0("The possibility of people with different birthday: 1 - ", p[100]))
print(paste0("The possibility of people with different birthday: 1 - ", round(p[100], 2)))
print(paste0("The possibility of people with different birthday: 1 - ", trunc(p[100])))
print(paste0("The possibility of people with different birthday: 1 - ", p[100]))
options(digits = 3)
print(paste0("The possibility of people with different birthday: 1 - ", p[100]))
print(paste0("The possibility of people with different birthday: 1 - ", p[100]ï¼Œ options(digits = 3)))
print(paste0("The possibility of people with different birthday: 1 - ", p[100], options(digits = 3) ))
print(paste0("The possibility of people with different birthday: 1 - ", p[100]))
# lost[k] : k people all have different birthday or Losing the game
lose = c(365 / 365)
for (i in 2:100){
k = i - 1
lose = append(lose, lose[k] * (365 - k) / 365)
}
print(paste0("The possibility of people with different birthday: 1 - ", p[100]))
win = 1 - lose
good_win = win[(win - 1/2) > 0]
help(argmin)
good_win
win
win == min[(win - 1/2) > 0]
win == min(win[(win - 1/2) > 0])
help(where)
help(which)
which(win == min(win[(win - 1/2) > 0]))
print(paste0("The smallest num k for a reasonable bet to me: ", which(win == min(win[(win - 1/2) > 0]))))
# lost[k] : k people all have different birthday or Losing the game
lose = c(365 / 365)
for (i in 2:100){
k = i - 1
lose = append(lose, lose[k] * (365 - k) / 365)
}
# 7.(b)
print(paste0("The possibility of people with different birthday: 1 - ", p[100]))
# 7.(c)
win = 1 - lose
print(paste0("The smallest num k for a reasonable bet to me: ", which(win == min(win[(win - 1/2) > 0]))))
# lost[k] : k people all have different birthday or Losing the game
lose = c(365 / 365)
for (i in 2:100){
k = i - 1
lose = append(lose, lose[k] * (365 - k) / 365)
}
# 7.(b)
print(paste0("The possibility of 100 people not with different birthday: 1 - ", p[100]))
# 7.(c)
win = 1 - lose
print(paste0("The smallest num k for a reasonable bet to me: ", which(win == min(win[(win - 1/2) > 0]))))
# lost[k] : k people all have different birthday or Losing the game
lose = c(365 / 365)
# lost[k] : k people all have different birthday or Losing the game
lose = c(365 / 365)
for (i in 2:100){
k = i - 1
lose = append(lose, lose[k] * (365 - k) / 365)
}
# 7.(b)
print(paste0("The possibility of 100 people not with different birthday (I win): 1 - ", p[100]))
# 7.(c)
win = 1 - lose
print(paste0("The smallest num k for a reasonable bet to me: ", which(win == min(win[(win - 1/2) > 0]))))
win[23]
win
# lost[k] : k people all have different birthday or Losing the game
lose = c(365 / 365)
for (i in 2:100){
k = i - 1
lose = append(lose, lose[k] * (365 - k) / 365)
}
# 7.(b)
print(paste0("The possibility of 100 people not with different birthday (I win): 1 - ", p[100]))
# 7.(c)
win = 1 - lose
# lost[k] : k people all have different birthday or Losing the game
lose = c(365 / 365)
for (i in 2:100){
k = i - 1
lose = append(lose, lose[k] * (365 - k) / 365)
}
# 7.(b)
print(paste0("The possibility of 100 people not with different birthday (I win): 1 - ", p[100]))
# lost[k] : k people all have different birthday or Losing the game
lose = c(365 / 365)
for (i in 2:100){
k = i - 1
lose = append(lose, lose[k] * (365 - k) / 365)
}
# 7.(b)
print(paste0("The possibility of 100 people not with different birthday (I win): 1 - ", lose[100]))
# 7.(c)
win = 1 - lose
win
# lost[k] : k people all have different birthday or Losing the game
lose = c(365 / 365)
for (i in 2:100){
k = i - 1
lose = append(lose, lose[k] * (365 - k) / 365)
}
# 7.(b)
print(paste0("The possibility of 100 people not with different birthday (I win): 1 - ", lose[100]))
# 7.(c)
win = 1 - lose
print(paste0("The smallest num k for a reasonable bet to me: ", which(win == min(win[(win - 1/2) > 0]))))
which(win == min(win[(win - 1/2) > 0]))
# lost[k] : k people all have different birthday or Losing the game
lose = c(365 / 365)
for (i in 2:100){
k = i - 1
lose = append(lose, lose[k] * (365 - k) / 365)
}
# 7.(b)
print(paste0("The possibility of 100 people not with different birthday (I win): 1 - ", lose[100]))
# 7.(c)
win = 1 - lose
print(paste0("The smallest num k for a reasonable bet to me: ", which(win == min(win[(win - 1/2) > 0]))))
which(win == min(win[(win - 1/2) > 0]))
# lost[k] : k people all have different birthday or Losing the game
# win[k] : among k people, some 2 people have same birthday or Wining the game
lose = c(365 / 365)
for (i in 2:100){
k = i - 1
lose = append(lose, lose[k] * (365 - k) / 365)
}
# 7.(b)
print(paste0("The possibility of 100 people not with different birthday (I win): 1 - ", lose[100]))
# 7.(c)
win = 1 - lose
print(paste0("The smallest num k for a reasonable bet to me: ", which(win == min(win[(win - 1/2) > 0]))))
which(win == min(win[(win - 1/2) > 0]))
library(dplyr)
install.packages("dplyr")
library(dplyr)
help(filter)
head(mtcars)
####################
# dplyr Exercises
####################
library(dplyr)
head(mtcars)
filter(mtcars, mpg > 20 & cyl == 6)
arrange(mtcars, cyl, desc(t))
arrange(mtcars, cyl, desc(t))
arrange(mtcars, cyl, desc(wt))
select(mtcars, mpg, p)
select(mtcars, mpg, hp)
select(mtcars, gear) %>% distinct()
mutate(mtcars, performance = hp / wt)
summarise(mtcars, avg_mpg = mean(mpg, na.rm = TRUE))
mtcars %>% filter(cyl > 6) %>% summarise(stderr(hp, na.rm=TRUE))
mtcars %>% filter(cyl > 6) %>% summarise(stderr(hp))
mtcars %>% filter(cyl > 6) %>% summarise(std_hp = stderr(hp))
mtcars %>% filter(cyl > 6) %>% summarise(std_hp = stderr())
mtcars %>% filter(cyl > 6) %>% summarise(std_hp = mean())
mtcars %>% filter(cyl > 6) %>% summarise(std_hp = mean(hp, na.rm=TRUE))
mtcars %>% filter(cyl > 6) %>% summarise(std_hp = stderr(hp, na.rm=TRUE))
mtcars %>% filter(cyl > 6) %>% summarise(std_hp = stdin(hp, na.rm=TRUE))
mtcars %>% filter(cyl > 6) %>% summarise(std_hp = stdin(hp))
mtcars %>% filter(cyl > 6) %>% summarise(std_hp = stderr(hp))
mtcars %>% filter(cyl > 6) %>% summarise(mean_hp = mean(hp, na.rm=TRUE))
mtcars
install.packages("tidyr")
install.packages("data.table")
qt1:qt10
X:Z
x:z
help(separate)
library(tidyr)
library(data.table)
install.packages(data.table)
install.packages("data.table")
library(data.table)
help("separate")
factorial(90) / factorial(79) / factorial(11)
install.packages("combinat")
combn(3, 2)
library(combinat)
combn(3, 2)
require(combinat)
combn(3, 2)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(data = mtcars, aes(x = mpg, y = hp))
pl <- ggplot(data = mtcars, aes(x = mpg, y = hp))
pl + geom_point()
help(7getSymbols)
help(7getSymbols)
install.packages("quantmod")
help(7getSymbols)
help(getSymbols)
help(getSymbols)
??getSymbols
library(quantmod)
ex <- getSymbol("GOOG", source("goog"))
ex <- getSymbols("GOOG", source("goog"))
ex <- getSymbols("GOOG", source("google"))
ex <- getSymbols("GOOG", src = "google")
ex <- getSymbols("GOOG", src = "yahoo")
barChart(ex)
hist(ex)
ex
getSymbols("AAPL",src="yahoo")
barChart(AAPL)
hist(AAPL)
type(AAPL)
install.packages(shiny)
install.packages("shiny")
library(quantmod)
setwd("/Users/chenjipeng/Documents/Learn/Columbia/IEOR4150/Project/log_returns")
stocks = c("AAPL", "AMZN", "FB", "GOOG", "GOOGL", "MSFT", "MU", "NFLX", "NOW","NVDA")
bins = c(5, 10, 50, 100, 500 , 1000)
start_date = "2015-01-01"
end_date = "2018-01-01"
stocks_env = new.env()
getSymbols(Symbols = stocks, from = start_date, to = end_date, env = stocks_env)
for (stock in stocks) {
df = data.frame(stocks_env[[stock]])
colnames(df) <- c("open", "high", "low", "close", "volume", "adjusted")
df$log_returns = log(df$close / df$open)
write.csv(x = df["log_returns"], file = paste0(stock, ".csv"))
# enter folder ./log_returns/hist/stock
if(!dir.exists(paste0("hist/", stock))){
dir.create(file.path("hist", stock), recursive = TRUE)
}
setwd(paste0("./hist/", stock))
# enter folder ./log_returns/hist/stock/close_hist
if(!dir.exists("./close_hist")) {
dir.create(file.path("close_hist"), recursive = TRUE)
}
setwd("./close_hist")
for (bin in bins) {
jpeg(paste0(stock, "_", bin, ".jpg"))
hist(df$close, breaks = bin)
dev.off()
}
setwd("..")
# now at ./log_returns/hist/stock
# enter folder ./log_returns/hist/stock/log_hist
if(!dir.exists("./log_hist")) {
dir.create(file.path("log_hist"), recursive = TRUE)
}
setwd("./log_hist")
for (bin in bins) {
jpeg(paste0(stock, "_", bin, ".jpg"))
hist(df$log_returns, breaks = bin)
dev.off()
}
setwd("..")
setwd("..")
setwd("..")
}
df
dim(df)
dim(df) <- c(700,7)
df
apply(df, 2, mean)
stock_means = data.frame()
stock_means = rbind(stock_means, apply(df, 2, mean))
stock_means
typeof(apply(df, 2, mean))
data.frame(apply(df, 2, mean))
t(data.frame(apply(df, 2, mean)))
stock_means = data.frame()
stock_means = rbind(stock_means, t(data.frame(apply(df, 2, mean))))
stock_means
View(stock_means)
stock_means = data.frame()
stock_means = rbind(stock_means, t(data.frame(apply(df, 2, mean), row.names = stock)))
stock_means = rbind(stock_means, t(data.frame(apply(df, 2, mean), row.names = c(stock))))
stock
cbind(data.frame(apply(df, 2, mean)), stock)
(data.frame(apply(df, 2, mean)), stock)
data.frame(apply(df, 2, mean))
t(data.frame(apply(df, 2, mean)))
row.names(t(data.frame(apply(df, 2, mean)))) <- stock
a <- data.frame(name=c("A", "B"), b=1:2)
a
b <- data.frame(a=1:2, b=1:2)
b
row.names(b) <- a$name
b
row.names(b) <-c(13,123)
b
cur_mean <- t(data.frame(apply(df, 2, mean)))
rol.names(cur_mean)
row.names(cur_mean)
row.names(cur_mean) <- stock
cur_mean
stock_means = rbind(stock_means, cur_mean)
stock_means\
stock_means
var(df)
library(quantmod)
setwd("/Users/chenjipeng/Documents/Learn/Columbia/IEOR4150/Project/log_returns")
stocks = c("AAPL", "AMZN", "FB", "GOOG", "GOOGL", "MSFT", "MU", "NFLX", "NOW","NVDA")
bins = c(5, 10, round(sqrt(755)), 50, 100, 500 , 1000)
start_date = "2015-01-01"
end_date = "2018-01-01"
stocks_env = new.env()
getSymbols(Symbols = stocks, from = start_date, to = end_date, env = stocks_env)
stock_means = data.frame()
stock_vars = data.frame()
for (stock in stocks) {
df = data.frame(stocks_env[[stock]])
colnames(df) <- c("open", "high", "low", "close", "volume", "adjusted")
df$log_returns = log(df$close / df$open)
write.csv(x = df["log_returns"], file = paste0(stock, ".csv"))
cur_mean <- t(data.frame(apply(df, 2, mean)))
row.names(cur_mean) <- stock
stock_means = rbind(stock_means, cur_mean)
cur_var <- t(data.frame(apply(df, 2, var)))
row.names(cur_var) <- stock
stock_vars = rbind(stock_vars, cur_var)
# enter folder ./log_returns/hist/stock
if(!dir.exists(paste0("hist/", stock))){
dir.create(file.path("hist", stock), recursive = TRUE)
}
setwd(paste0("./hist/", stock))
# enter folder ./log_returns/hist/stock/close_hist
if(!dir.exists("./close_hist")) {
dir.create(file.path("close_hist"), recursive = TRUE)
}
setwd("./close_hist")
for (bin in bins) {
jpeg(paste0(stock, "_", bin, ".jpg"))
hist(df$close, breaks = bin - 1, main = paste0(stock," close price with bin = ", bin))
dev.off()
}
setwd("..")
# now at ./log_returns/hist/stock
# enter folder ./log_returns/hist/stock/log_hist
if(!dir.exists("./log_hist")) {
dir.create(file.path("log_hist"), recursive = TRUE)
}
setwd("./log_hist")
for (bin in bins) {
jpeg(paste0(stock, "_", bin, ".jpg"))
hist(df$log_returns, breaks = bin - 1, main = paste0(stock," log_retur with bin = ", bin))
dev.off()
}
setwd("..")
setwd("..")
setwd("..")
}
if(!dir.exists("./stats")) {
dir.create(file.path("stats"), recursive = TRUE)
}
setwd("./stats")
write.csv(x = stock_means, file = "Means.csv")
write.csv(x = stock_vars, file = "Vars.csv")
